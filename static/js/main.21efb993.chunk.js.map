{"version":3,"sources":["service/EventService.ts","model/DateContextProvider.tsx","model/CarouselEnum.ts","components/Weather/TemperatureDisplay.tsx","components/Weather/WeatherIcon.tsx","components/FetchingError.tsx","components/Weather/WeatherInformation.tsx","components/CarouselWrapper.tsx","components/HwrNavbar.tsx","components/Homepage.tsx","App.tsx","components/calendar/MyCalendar.tsx","components/calendar/EventCard.tsx","components/calendar/CalendarMetadata.tsx","serviceWorker.ts","index.tsx","resources/hwr-logo-alt.svg","resources/calendar.png"],"names":["EventService","data","forEach","item","i","length","summary","moment","dtend","date","splice","events","map","event","allDay","title","replace","start","dtstart","toDate","end","momentProvider","locale","CarouselEnum","initalContext","isLoading","eventData","dateContext","today","month","year","setIsLoading","newLoadingState","setEventData","newEvents","setDateContext","newContext","setToday","newDay","setMonth","newMonth","setYear","newYear","CalendarContext","React","createContext","useCalendarContext","useContext","TemperatureDisplay","todayWeather","className","style","color","temperatureHigh","he","decode","temperatureLow","WeatherIcon","icon","Fragment","toUpperCase","RegExp","autoplay","FetchingError","id","WeatherInformation","label","useState","setTodayWeather","isError","setIsError","useEffect","a","axios","get","unix","response","daily","fetchData","catch","error","isAxiosError","finally","undefined","Spinner","animation","variant","display","flexDirection","margin","CarouselContext","index","setIndex","newIndex","useCarouselContext","CarouselContextProvider","children","Provider","value","CarouselWrapper","content","Carousel","activeIndex","onSelect","interval","prevIcon","nextIcon","indicators","controls","touch","Item","key","HwrNavbar","Navbar","bg","sticky","as","Brand","onClick","CALENDAR","alt","src","hwrLogo","width","height","Nav","Link","Homepage","Col","HOMEPAGE","setTimeout","calendar","carouselContent","state","dispatch","request","method","url","console","log","mergeAssociatedEvents","fetchEventData","localizer","momentLocalizer","transformedEvents","setTransformedEvent","transformToApiEvent","defaultView","views","endAccessor","startAccessor","timeslots","step","min","Date","max","components","props","timeGutterHeader","week","header","duration","diff","asDays","toFixed","ProgressBar","animated","semesterStart","setSemesterStart","semesterEnd","setSemesterEnd","semesterTimeLeft","setSemesterTimeLeft","from","format","App","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.21efb993.chunk.js","sourcesContent":["import moment from \"moment\";\nimport {Event} from \"react-big-calendar\";\nimport {MyEvent} from \"../model/EventModel\";\n\nexport class EventService {\n\n    static mergeAssociatedEvents<T extends MyEvent>(data: T[]): T[] {\n        data.forEach((item: T, i: number) => {\n            if (i === data.length || i === 0) {\n                return\n            }\n\n            /* for() {*/\n            while (\n                (\n                    (data[i].summary === data[i - 1].summary)\n                    && (moment(data[i].dtend).date() === moment(data[i - 1].dtend).date())\n                )\n                ) {\n                data[i - 1].dtend = data[i].dtend;\n                data.splice(i, 1);\n            }\n            /*}*/\n        });\n        return data;\n    };\n\n    static transformToApiEvent<T extends MyEvent>(events: T[]): Event[] {\n        return events.map((event: T) => {\n            return {\n                allDay: false,\n                title: event.summary.replace(/\\\\;/g, \" | \"),\n                start: moment(event.dtstart).toDate(),\n                end: moment(event.dtend).toDate()\n            }\n        });\n\n    }\n}","import moment, {Moment} from \"moment\";\nimport React, {Dispatch, FunctionComponent, ReactNode, SetStateAction, useContext, useEffect, useState} from \"react\";\nimport {MyEvent} from \"./EventModel\";\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\nimport {EventService} from \"../service/EventService\";\n\nexport interface CalendarContext {\n    isLoading: boolean\n    eventData: MyEvent[]\n    dateContext: moment.Moment\n    today: number\n    month: number\n    year: number\n\n    setIsLoading: Dispatch<SetStateAction<boolean>>\n    setEventData: Dispatch<SetStateAction<MyEvent[]>>\n    setDateContext: Dispatch<SetStateAction<Moment>>\n    setToday: Dispatch<SetStateAction<number>>\n    setYear: Dispatch<SetStateAction<number>>\n    setMonth: Dispatch<SetStateAction<number>>\n}\n\nconst momentProvider = moment();\nmomentProvider.locale(\"de\");\n\nconst initalContext: CalendarContext = {\n\n    isLoading: false,\n    eventData: [],\n    dateContext: momentProvider,\n    today: momentProvider.date(),\n    month: momentProvider.month() + 1,\n    year: momentProvider.year(),\n\n    setIsLoading: newLoadingState => {\n    },\n    setEventData: newEvents => {\n    },\n    setDateContext: newContext => {\n    },\n    setToday: newDay => {\n    },\n    setMonth: newMonth => {\n    },\n    setYear: newYear => {\n    },\n};\n\nexport const CalendarContext = React.createContext<CalendarContext>(initalContext);\n\nexport const DateContextProvider: FunctionComponent<{ children: ReactNode }> = ({children}) => {\n\n    const [eventData, setEventData] = useState<MyEvent[]>([]);\n    const [dateContext, setDateContext] = useState<Moment>(momentProvider);\n    const [today, setToday] = useState<number>(momentProvider.date());\n    const [month, setMonth] = useState<number>(momentProvider.month() + 1);\n    const [year, setYear] = useState<number>(momentProvider.year());\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n\n    const state = {\n        isLoading,\n        eventData,\n        dateContext,\n        today,\n        month,\n        year,\n    };\n\n\n    const dispatch = {\n        setIsLoading,\n        setEventData,\n        setDateContext,\n        setToday,\n        setMonth,\n        setYear,\n    };\n\n    const value = {...state, ...dispatch};\n\n\n    useEffect(() => {\n        async function fetchEventData() {\n            const response: AxiosResponse<MyEvent[]> = await axios.request<MyEvent[]>({\n                method: \"GET\",\n                url: \"https://hwr-wi-204.sagebiels.org/api/v1/events\",\n            });\n            console.log(response);\n            setEventData(EventService.mergeAssociatedEvents(response.data));\n        }\n\n        fetchEventData()\n            .catch((error: AxiosError) => {\n                console.log(error)\n            })\n    }, []);\n\n    return (\n        <CalendarContext.Provider\n            value={value}>\n            {children}\n        </CalendarContext.Provider>\n    )\n};\n\nexport const useCalendarContext = (): CalendarContext => {\n    return useContext<CalendarContext>(CalendarContext);\n};","export enum CarouselEnum {\n    HOMEPAGE = 0,\n    CALENDAR = 1\n}","import React, {FunctionComponent} from 'react';\nimport {DailyWetherMeta} from \"../../model/DarkSideWether\";\nimport he from \"he\";\n\ninterface TemperatureInformation {\n    todayWeather: DailyWetherMeta[]\n}\n\nexport const TemperatureDisplay: FunctionComponent<TemperatureInformation> = ({todayWeather}) => {\n\n    return (\n        <div className={\"temperature-display\"}>\n            <p>\n                <span style={{color: \"rgba(255,91,107,0.71)\"}}>\n                Hoch:{(todayWeather as DailyWetherMeta[])[0].temperatureHigh}C{he.decode(\"&deg\")}\n                </span>\n                <br/>\n                <span style={{color: \"rgba(79,141,255,0.85)\"}}>\n                Tief: {(todayWeather as DailyWetherMeta[])[0].temperatureLow}C{he.decode(\"&deg\")}\n                </span>\n            </p>\n        </div>\n    );\n};\n","import {DarksideIcon} from \"../../model/DarkSideWether\";\nimport React, {FunctionComponent} from \"react\";\n// @ts-ignore\nimport Skycons from \"react-skycons\"\n\ninterface WeatherIconProps {\n    icon: DarksideIcon\n}\n\nexport const WeatherIcon: FunctionComponent<WeatherIconProps> = ({icon}) =>  {\n    return (\n        <React.Fragment>\n            <Skycons\n                className={\"weather-icon\"}\n                icon={icon.toUpperCase().replace(new RegExp(\"-\", \"g\"), \"_\")}\n                color={\"white\"}\n                autoplay\n            />\n        </React.Fragment>\n    )\n};","import React, {FunctionComponent} from 'react';\n\n\nexport const FetchingError: FunctionComponent = () => {\n    return (\n        <div id={\"error\"}>\n            <p><em>Fehler beim Laden der Daten!</em></p>\n        </div>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from 'react';\nimport {DailyWetherMeta, DarkSideWetherResponse} from \"../../model/DarkSideWether\";\nimport moment from \"moment\";\nimport axios, {AxiosError} from \"axios\"\nimport {Spinner} from 'react-bootstrap';\nimport {TemperatureDisplay} from \"./TemperatureDisplay\";\nimport {WeatherIcon} from \"./WeatherIcon\";\nimport {FetchingError} from \"../FetchingError\";\n\n\nexport interface WeatherHeaderProps {\n    label: string,\n    date: Date\n}\n\nexport const WeatherInformation: FunctionComponent<WeatherHeaderProps> = ({label, date}) => {\n\n    const [todayWeather, setTodayWeather] = useState<undefined | DailyWetherMeta[]>();\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await axios.get<DarkSideWetherResponse>(\n                \"https://proncal-weather-api.dns-cloud.net/\" + moment(date).unix()\n            );\n            setTodayWeather(response.data.daily.data);\n        }\n\n        fetchData()\n            .catch((error: AxiosError) => setIsError(error.isAxiosError))\n            .finally(() => setIsLoading(false));\n    }, [date]);\n\n\n    return (\n        <div>\n            {isLoading && todayWeather === undefined ?\n                <Spinner animation={\"grow\"} variant={\"light\"}/>\n                :\n                (\n                    isError ?\n                        <FetchingError/>\n                        :\n                        <React.Fragment>\n                            <div\n                                style={{\n                                    display: \"inline-block\",\n                                    flexDirection: \"row\",\n                                    margin: \"5px\"\n                                }}>\n                                {label}\n                                <WeatherIcon icon={(todayWeather as DailyWetherMeta[])[0].icon}/>\n                            </div>\n                            <TemperatureDisplay todayWeather={todayWeather as DailyWetherMeta[]}/>\n                        </React.Fragment>\n                )\n            }\n        </div>\n    );\n};","import React, {Dispatch, FunctionComponent, ReactElement, SetStateAction, useContext, useState} from 'react';\nimport {Carousel} from \"react-bootstrap\";\n\ninterface CarouselWrapperProps {\n    content: ReactElement[]\n}\n\nexport interface CarouselContext {\n    index: number\n    setIndex: Dispatch<SetStateAction<number>>\n}\n\nconst initialCarouselContext: CarouselContext = {\n    index: 0,\n    setIndex: newIndex => {\n    }\n};\n\nexport const CarouselContext = React.createContext(initialCarouselContext);\n\nexport const useCarouselContext = () => {\n    return useContext<CarouselContext>(CarouselContext)\n};\n\nexport const CarouselContextProvider: FunctionComponent<{ children: ReactElement }> = ({children}) => {\n\n    const [index, setIndex] = useState<number>(0);\n    return (\n        <CarouselContext.Provider\n            value={{\n                index,\n                setIndex\n            }}\n        >\n            {children}\n        </CarouselContext.Provider>\n    )\n};\n\nconst CarouselWrapper: FunctionComponent<CarouselWrapperProps> = ({content}) => {\n    const {index} = useCarouselContext();\n\n    return (\n        <Carousel className={\"carouselA\"}\n                  activeIndex={index}\n                  onSelect={() => {}}\n                  interval={null}\n                  prevIcon={null}\n                  nextIcon={null}\n                  indicators={false}\n                  controls={false}\n                  touch={true}\n        >\n            {\n                content.map(\n                    (item: ReactElement, index: number) => {\n                        return (\n                            <Carousel.Item key={index}>\n                                {item}\n                            </Carousel.Item>\n                        )\n                    }\n                )\n            }\n        </Carousel>\n    );\n};\n\nexport default CarouselWrapper;","import React from 'react';\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport hwrLogo from \"../resources/hwr-logo-alt.svg\";\nimport {useCarouselContext} from \"./CarouselWrapper\";\nimport {CarouselEnum} from \"../model/CarouselEnum\";\n\nexport const HwrNavbar = () => {\n    const {index, setIndex} = useCarouselContext();\n\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\"\n                sticky={\"top\"}\n                as={\"div\"}\n        >\n            <Navbar.Brand onClick={\n                () => {\n                    if (index === CarouselEnum.CALENDAR)\n                        setIndex(index - 1)\n                }}>\n                <img\n                    alt=\"failed to load logo\"\n                    src={hwrLogo}\n                    width=\"30\"\n                    height=\"30\"\n                    className=\"d-inline-block align-top mr-4\"\n                />\n                HWR Berlin - Stundenplan\n            </Navbar.Brand>\n            {index === CarouselEnum.CALENDAR &&\n            <Nav.Link\n                style={{color: \"lightgray\"}}\n                onClick={() => setIndex(index - 1)}>Zurück</Nav.Link>}\n        </Navbar>\n    );\n};\n","import React from 'react';\nimport {Col} from \"react-bootstrap\";\nimport calendar from \"../resources/calendar.png\"\nimport {useCarouselContext} from \"./CarouselWrapper\";\nimport {CarouselEnum} from \"../model/CarouselEnum\";\n\nconst Homepage = () => {\n    const {setIndex, index} = useCarouselContext();\n\n    return (\n        <Col className={\"home-container\"}>\n            <Col className={\"homepage-presentment-container\"}>\n                <div id={\"homepage-presentment-text\"}>\n                    <h1>HWR - Kalender</h1>\n                    <h4> Dein moderner Stundenplan </h4>\n                    <h5> Immer, Überall </h5>\n                </div>\n                <div id={\"homepage-presentment-button\"}\n                     onClick={\n                         () => {\n                             if (index === CarouselEnum.HOMEPAGE)\n                                 setTimeout(() => {\n                                     setIndex(index + 1)\n                                 }, 300)\n                         }\n                     }>\n                    <img\n                        src={calendar}\n                        alt={\"Fehler beim laden des logos\"}\n                        className={\"calendar-icon\"}\n                    />\n                </div>\n            </Col>\n        </Col>\n    );\n};\nexport default Homepage\n\n","import React from 'react';\nimport {MyCalendar} from \"./components/calendar/MyCalendar\";\nimport {DateContextProvider} from \"./model/DateContextProvider\";\nimport {CalendarMetadata} from \"./components/calendar/CalendarMetadata\";\nimport {HwrNavbar} from \"./components/HwrNavbar\";\nimport Homepage from \"./components/Homepage\";\nimport CarouselWrapper, {CarouselContextProvider} from \"./components/CarouselWrapper\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport \"./styles/media-queries.sass\"\n\nconst carouselContent = [\n    <Homepage/>,\n    <DateContextProvider>\n        <MyCalendar/>\n        <CalendarMetadata/>\n    </DateContextProvider>\n];\n\nconst App = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Route exact path={\"/\"}>\n                <CarouselContextProvider>\n                    <React.Fragment>\n                        <HwrNavbar/>\n                        <CarouselWrapper content={carouselContent}/>\n                    </React.Fragment>\n                </CarouselContextProvider>\n            </Route>\n        <footer id={\"footer\"}/>\n        </BrowserRouter>\n\n    );\n};\nexport default App;\n","import React, {FunctionComponent, useEffect, useState} from 'react';\nimport {Calendar, Event, EventProps, momentLocalizer} from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"\nimport {useCalendarContext} from \"../../model/DateContextProvider\";\nimport \"../../styles/customCalendar.sass\"\nimport \"moment/locale/de\"\nimport \"../../styles/app.sass\"\nimport {EventService} from \"../../service/EventService\";\nimport {EventCard} from \"./EventCard\";\nimport {WeatherInformation} from \"../Weather/WeatherInformation\";\nimport {ProgressBar} from \"react-bootstrap\";\n\n\nexport const MyCalendar: FunctionComponent = () => {\n    const {eventData, dateContext} = useCalendarContext();\n    const localizer = momentLocalizer(moment);\n    const [transformedEvents, setTransformedEvent] = useState<Event[] | undefined>(undefined);\n\n    useEffect(() => {\n        setTransformedEvent(EventService.transformToApiEvent(eventData))\n    }, [eventData]);\n\n    return (\n        <div>\n            {\n                transformedEvents ?\n                <Calendar\n                    localizer={localizer}\n                    events={transformedEvents}\n                    defaultView={\"week\"}\n                    views={[\"day\", \"week\"]}\n                    endAccessor={\"end\"}\n                    startAccessor={\"start\"}\n                    timeslots={12}\n                    step={5}\n                    min={new Date(1, 1, 1, 8)}\n                    max={new Date(1, 1, 1, 22)}\n                    components={{\n                        event: ((event: EventProps) => EventCard(event)),\n                        timeGutterHeader: () => null,\n                        week: {\n                            header: (props: any) => {\n                                if (moment(props.date).week() === dateContext.week()) {\n                                    return (\n                                        <div className={\"rbc-header\"}>\n                                            <WeatherInformation label={props.label} date={props.date}/>\n                                        </div>\n                                    )\n                                } else {\n                                    return (\n                                        <div>\n                                            {props.label}\n                                            <p className={\"weather-forecast-not\"}>Wettervoraussage\n                                                in: {moment.duration(moment(props.date).diff(dateContext)).asDays().toFixed(0) + \" \"}\n                                                Tagen\n                                            </p>\n                                        </div>\n                                    )\n                                }\n                            }\n                        },\n                    }}/>\n                    :\n                    <ProgressBar variant={\"info\"} animated/>\n\n\n            }\n\n        </div>\n    );\n};\n\n\n\n\n\n","import React, {FunctionComponent} from 'react';\nimport {EventProps} from \"react-big-calendar\"\n\n\nexport const EventCard:FunctionComponent<EventProps> = (props: EventProps) => {\n    return (\n                <div className={\"event-card\"}>\n                    {props.title}\n                </div>\n    );\n};\n","import React, {useEffect, useState} from 'react';\nimport {useCalendarContext} from \"../../model/DateContextProvider\";\nimport moment, {Moment} from \"moment\";\n\nexport const CalendarMetadata = () => {\n    const {eventData, isLoading} = useCalendarContext();\n    const [semesterStart, setSemesterStart] = useState<Moment>();\n    const [semesterEnd, setSemesterEnd] = useState<Moment>();\n    const [semesterTimeLeft, setSemesterTimeLeft] = useState<string>();\n\n    useEffect(() => {\n        if (eventData[0] !== undefined) {\n            setSemesterStart(moment(eventData[0].dtstart));\n            setSemesterEnd(moment(eventData[eventData.length - 1].dtend));\n            setSemesterTimeLeft(moment(eventData[eventData.length - 1].dtend).from(moment(eventData[0].dtstart), true))\n        }\n    }, [isLoading, eventData]);\n\n    return (\n        <div>\n            {\n                (!isLoading && semesterEnd !== undefined && semesterStart !== undefined) &&\n                <div className={\"calendar-metadata-container\"}>\n                    <h5>Semesterstart: <b>{semesterStart?.format(\"DD.MM.YYYY\")}</b></h5>\n                    <h5>Semesterende: <b>{semesterEnd?.format(\"DD.MM.YYYY\")}</b></h5>\n                    <h5>Zeit bis zum Semesterende: <b>{semesterTimeLeft}</b></h5>\n                </div>\n            }\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hwr-logo-alt.244061df.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.cd46548e.png\";"],"sourceRoot":""}