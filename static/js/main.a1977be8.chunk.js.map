{"version":3,"sources":["service/EventService.ts","components/calendar/CalendarContextProvider.tsx","components/Weather/TemperatureDisplay.tsx","components/Weather/WeatherIcon.tsx","components/ui/FetchingError.tsx","components/Weather/WeatherInformation.tsx","components/calendar/MyCalendar.tsx","components/calendar/EventCard.tsx","components/calendar/CalendarMetadata.tsx","components/ui/HwrNavbar.tsx","App.tsx","serviceWorker.ts","index.tsx","resources/hwr-logo-alt.svg","resources/darkskylogo.png"],"names":["EventService","data","forEach","item","i","length","summary","moment","dtend","date","splice","events","map","event","allDay","title","replace","start","dtstart","toDate","end","momentProvider","locale","initalContext","isLoading","eventData","dateContext","today","month","year","error","setIsLoading","newLoadingState","setEventData","newEvents","setDateContext","newContext","setToday","newDay","setMonth","newMonth","setYear","newYear","setError","CalendarContext","React","createContext","CalendarContextProvider","children","useState","state","dispatch","value","useEffect","a","axios","request","method","url","response","mergeAssociatedEvents","fetchEventData","catch","isAxiosError","Provider","useCalendarContext","useContext","TemperatureDisplay","todayWeather","className","style","color","temperatureHigh","he","decode","temperatureLow","WeatherIcon","icon","Fragment","toUpperCase","RegExp","autoplay","FetchingError","message","Alert","variant","id","WeatherInformation","label","setTodayWeather","isError","setIsError","requestCount","setRequestCount","Axios","get","unix","daily","Number","headers","fetchData","finally","undefined","Spinner","animation","display","flexDirection","margin","MyCalendar","localizer","momentLocalizer","transformedEvents","setTransformedEvent","transformToApiEvent","defaultView","views","endAccessor","startAccessor","timeslots","step","min","Date","max","components","props","timeGutterHeader","week","header","duration","diff","asDays","toFixed","ProgressBar","animated","CalendarMetadata","semesterStart","setSemesterStart","semesterEnd","setSemesterEnd","semesterTimeLeft","setSemesterTimeLeft","from","format","HwrNavbar","Navbar","bg","sticky","Nav","Brand","alt","src","hwrLogo","width","height","darkSkyLogo","App","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a1977be8.chunk.js","sourcesContent":["import moment from \"moment\";\nimport {Event} from \"react-big-calendar\";\nimport {MyEvent} from \"../types/Event\";\n\nexport class EventService {\n\n    static mergeAssociatedEvents<T extends MyEvent>(data: T[]): T[] {\n        data.forEach((item: T, i: number) => {\n            if (i === data.length || i === 0) {\n                return\n            }\n\n            /* for() {*/\n            while (\n                (\n                    (data[i].summary === data[i - 1].summary)\n                    && (moment(data[i].dtend).date() === moment(data[i - 1].dtend).date())\n                )\n                ) {\n                data[i - 1].dtend = data[i].dtend;\n                data.splice(i, 1);\n            }\n            /*}*/\n        });\n        return data;\n    };\n\n    static transformToApiEvent<T extends MyEvent>(events: T[]): Event[] {\n        return events.map((event: T) => {\n            return {\n                allDay: false,\n                title: event.summary.replace(/\\\\;/g, \" | \"),\n                start: moment(event.dtstart).toDate(),\n                end: moment(event.dtend).toDate()\n            }\n        });\n\n    }\n}","import moment, {Moment} from \"moment\";\nimport React, {Dispatch, FunctionComponent, ReactNode, SetStateAction, useContext, useEffect, useState} from \"react\";\nimport {MyEvent} from \"../../types/Event\";\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\nimport {EventService} from \"../../service/EventService\";\n\nexport interface CalendarContext {\n    isLoading: boolean\n    eventData: MyEvent[]\n    dateContext: moment.Moment\n    today: number\n    month: number\n    year: number\n    error: boolean\n\n    setIsLoading: Dispatch<SetStateAction<boolean>>\n    setEventData: Dispatch<SetStateAction<MyEvent[]>>\n    setDateContext: Dispatch<SetStateAction<Moment>>\n    setToday: Dispatch<SetStateAction<number>>\n    setYear: Dispatch<SetStateAction<number>>\n    setMonth: Dispatch<SetStateAction<number>>\n    setError: Dispatch<SetStateAction<boolean>>\n}\n\nconst momentProvider = moment();\nmomentProvider.locale(\"de\");\n\nconst initalContext: CalendarContext = {\n\n    isLoading: false,\n    eventData: [],\n    dateContext: momentProvider,\n    today: momentProvider.date(),\n    month: momentProvider.month() + 1,\n    year: momentProvider.year(),\n    error: false,\n\n    setIsLoading: newLoadingState => {\n    },\n    setEventData: newEvents => {\n    },\n    setDateContext: newContext => {\n    },\n    setToday: newDay => {\n    },\n    setMonth: newMonth => {\n    },\n    setYear: newYear => {\n    },\n    setError: error => {\n    },\n};\n\nexport const CalendarContext = React.createContext<CalendarContext>(initalContext);\n\nexport const CalendarContextProvider: FunctionComponent<{ children: ReactNode }> = ({children}) => {\n\n    const [eventData, setEventData] = useState<MyEvent[]>([]);\n    const [dateContext, setDateContext] = useState<Moment>(momentProvider);\n    const [today, setToday] = useState<number>(momentProvider.date());\n    const [month, setMonth] = useState<number>(momentProvider.month() + 1);\n    const [year, setYear] = useState<number>(momentProvider.year());\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<boolean>(false);\n\n    const state = {\n        isLoading,\n        eventData,\n        dateContext,\n        today,\n        month,\n        year,\n        error\n    };\n\n\n    const dispatch = {\n        setIsLoading,\n        setEventData,\n        setDateContext,\n        setToday,\n        setMonth,\n        setYear,\n        setError\n    };\n\n    const value = {...state, ...dispatch};\n\n\n    useEffect(() => {\n        async function fetchEventData() {\n            const response: AxiosResponse<MyEvent[]> = await axios.request<MyEvent[]>({\n                method: \"GET\",\n                url: \"https://hwr-wi-204.sagebiels.org/api/v1/events\",\n            });\n            setEventData(EventService.mergeAssociatedEvents(response.data));\n        }\n\n        fetchEventData()\n            .catch((error: AxiosError) => {\n                setError(error.isAxiosError)\n            })\n    }, []);\n\n    return (\n        <CalendarContext.Provider\n            value={value}>\n            {children}\n        </CalendarContext.Provider>\n    )\n};\n\nexport const useCalendarContext = (): CalendarContext => {\n    return useContext<CalendarContext>(CalendarContext);\n};","import React, {FunctionComponent} from 'react';\nimport {DailyWetherMeta} from \"../../types/DarkSideWether\";\nimport he from \"he\";\n\ninterface TemperatureInformation {\n    todayWeather: DailyWetherMeta[]\n}\n\nexport const TemperatureDisplay: FunctionComponent<TemperatureInformation> = ({todayWeather}) => {\n\n    return (\n        <div className={\"temperature-display\"}>\n            <p>\n                <span style={{color: \"rgba(255,91,107,0.71)\"}}>\n                Hoch:{(todayWeather as DailyWetherMeta[])[0].temperatureHigh}C{he.decode(\"&deg\")}\n                </span>\n                <br/>\n                <span style={{color: \"rgba(79,141,255,0.85)\"}}>\n                Tief: {(todayWeather as DailyWetherMeta[])[0].temperatureLow}C{he.decode(\"&deg\")}\n                </span>\n            </p>\n        </div>\n    );\n};\n","import {DarksideIcon} from \"../../types/DarkSideWether\";\nimport React, {FunctionComponent} from \"react\";\n// @ts-ignore\nimport Skycons from \"react-skycons\"\n\ninterface WeatherIconProps {\n    icon: DarksideIcon\n}\n\nexport const WeatherIcon: FunctionComponent<WeatherIconProps> = ({icon}) =>  {\n    return (\n        <React.Fragment>\n            <Skycons\n                className={\"weather-icon\"}\n                icon={icon.toUpperCase().replace(new RegExp(\"-\", \"g\"), \"_\")}\n                color={\"grey\"}\n                autoplay\n            />\n        </React.Fragment>\n    )\n};","import React, {FunctionComponent} from 'react';\nimport {Alert} from \"react-bootstrap\";\n\ninterface FetchingErrorProps {\n    message?: string\n}\n\nexport const FetchingError: FunctionComponent<FetchingErrorProps> = ({message}) => {\n\n    return (\n        <Alert variant={\"danger\"} id={\"fetching-error\"}>\n            {\n                message ?\n                    {message}\n                    :\n                    <React.Fragment>Fehler</React.Fragment>\n            }\n        </Alert>\n    );\n};\n","import React, {FunctionComponent, useEffect, useState} from 'react';\nimport {DailyWetherMeta, DarkSideWetherResponse} from \"../../types/DarkSideWether\";\nimport moment from \"moment\";\nimport Axios, {AxiosError} from \"axios\"\nimport {Spinner} from 'react-bootstrap';\nimport {TemperatureDisplay} from \"./TemperatureDisplay\";\nimport {WeatherIcon} from \"./WeatherIcon\";\nimport {FetchingError} from \"../ui/FetchingError\";\n\n\nexport interface WeatherHeaderProps {\n    label: string,\n    date: Date\n}\n\nexport const WeatherInformation: FunctionComponent<WeatherHeaderProps> = ({label, date}) => {\n\n    const [todayWeather, setTodayWeather] = useState<undefined | DailyWetherMeta[]>();\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [isError, setIsError] = useState<boolean>(false);\n    const [requestCount, setRequestCount] = useState<number>(0); // for not passing the 1000 call limit\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await Axios.get<DarkSideWetherResponse>(\n                \"https://proncal-weather-api.dns-cloud.net/\" + moment(date).unix()\n            );\n            setTodayWeather(response.data.daily.data);\n            setRequestCount(Number(response.headers.get(\"X-Forecast-API-Calls\")))\n        }\n\n        if (requestCount < 995) {\n            fetchData()\n                .catch((error: AxiosError) => setIsError(error.isAxiosError))\n                .finally(() => setIsLoading(false));\n        } else {\n            setIsError(true);\n            setIsLoading(false);\n        }\n    }, [requestCount, date]);\n\n\n    return (\n        <div>\n            {isLoading && todayWeather === undefined ?\n                <React.Fragment>\n                    {label}\n                    <Spinner animation={\"grow\"} variant={\"dark\"}/>\n                </React.Fragment>\n                :\n                (\n                    isError ?\n                        <React.Fragment>\n                            {label}\n                            <FetchingError/>\n                        </React.Fragment>\n                        :\n                        <React.Fragment>\n                            <div\n                                style={{\n                                    display: \"inline-block\",\n                                    flexDirection: \"row\",\n                                    margin: \"5px\"\n                                }}>\n                                {label}\n                                <WeatherIcon icon={(todayWeather as DailyWetherMeta[])[0].icon}/>\n                            </div>\n                            <TemperatureDisplay todayWeather={todayWeather as DailyWetherMeta[]}/>\n                        </React.Fragment>\n                )\n            }\n        </div>\n    );\n};","import React, {FunctionComponent, useEffect, useState} from 'react';\nimport {Calendar, Event, EventProps, momentLocalizer} from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"\nimport {useCalendarContext} from \"./CalendarContextProvider\";\nimport \"../../styles/customCalendar.sass\"\nimport \"moment/locale/de\"\nimport \"../../styles/app.sass\"\nimport {EventService} from \"../../service/EventService\";\nimport {EventCard} from \"./EventCard\";\nimport {WeatherInformation} from \"../Weather/WeatherInformation\";\nimport {ProgressBar} from \"react-bootstrap\";\nimport {FetchingError} from \"../ui/FetchingError\";\n\n\nexport const MyCalendar: FunctionComponent = () => {\n    const {eventData, dateContext} = useCalendarContext();\n    const {error} = useCalendarContext();\n    const localizer = momentLocalizer(moment);\n    const [transformedEvents, setTransformedEvent] = useState<Event[] | undefined>(undefined);\n\n    useEffect(() => {\n        setTransformedEvent(EventService.transformToApiEvent(eventData))\n    }, [eventData]);\n\n    return (\n        <div>\n            {\n                error ?\n                <FetchingError/>\n                :\n                transformedEvents ?\n                <Calendar\n                    localizer={localizer}\n                    events={transformedEvents}\n                    defaultView={\"week\"}\n                    views={[\"day\", \"week\"]}\n                    endAccessor={\"end\"}\n                    startAccessor={\"start\"}\n                    timeslots={12}\n                    step={5}\n                    min={new Date(1, 1, 1, 8)}\n                    max={new Date(1, 1, 1, 22)}\n                    components={{\n                        event: ((event: EventProps) => EventCard(event)),\n                        timeGutterHeader: () => null,\n                        week: {\n                            header: (props: any) => {\n                                if (moment(props.date).week() === dateContext.week()) {\n                                    return (\n                                        <div className={\"rbc-header\"}>\n                                            <WeatherInformation label={props.label} date={props.date}/>\n                                        </div>\n                                    )\n                                } else {\n                                    return (\n                                        <div>\n                                            {props.label}\n                                            <p className={\"weather-forecast-not\"}>Voraussage\n                                                in: {moment.duration(moment(props.date).diff(dateContext)).asDays().toFixed(0) + \" \"}\n                                                Tagen\n                                            </p>\n                                        </div>\n                                    )\n                                }\n                            }\n                        },\n                    }}/>\n                    :\n                    <ProgressBar variant={\"info\"} animated={true}/>\n            }\n\n        </div>\n    );\n};\n\n\n\n\n\n","import React, {FunctionComponent} from 'react';\nimport {EventProps} from \"react-big-calendar\"\n\n\nexport const EventCard:FunctionComponent<EventProps> = (props: EventProps) => {\n    return (\n                <div className={\"event-card\"}>\n                    {props.title}\n                </div>\n    );\n};\n","import React, {useEffect, useState} from 'react';\nimport {useCalendarContext} from \"./CalendarContextProvider\";\nimport moment, {Moment} from \"moment\";\n\nexport const CalendarMetadata = () => {\n    const {eventData, isLoading} = useCalendarContext();\n    const [semesterStart, setSemesterStart] = useState<Moment>();\n    const [semesterEnd, setSemesterEnd] = useState<Moment>();\n    const [semesterTimeLeft, setSemesterTimeLeft] = useState<string>();\n\n    useEffect(() => {\n        if (eventData[0] !== undefined) {\n            setSemesterStart(moment(eventData[0].dtstart));\n            setSemesterEnd(moment(eventData[eventData.length - 1].dtend));\n            setSemesterTimeLeft(moment(eventData[eventData.length - 1].dtend).from(moment(eventData[0].dtstart), true))\n        }\n    }, [isLoading, eventData]);\n\n    return (\n        <React.Fragment>\n            {\n                (!isLoading && semesterEnd !== undefined && semesterStart !== undefined) &&\n                <div className={\"calendar-metadata-container\"}>\n                    <h6>Semesterstart: <b>{semesterStart?.format(\"DD.MM.YYYY\")}</b> | </h6>\n                    <h6>Semesterende: <b>{semesterEnd?.format(\"DD.MM.YYYY\")}</b> | </h6>\n                    <h6>Zeit bis zum Semesterende: <b>{semesterTimeLeft}</b></h6>\n                </div>\n            }\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport hwrLogo from \"../../resources/hwr-logo-alt.svg\";\nimport darkSkyLogo from \"../../resources/darkskylogo.png\"\n\nexport const HwrNavbar = () => {\n\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\"\n                sticky={\"top\"}>\n            <Nav>\n                <Navbar.Brand>\n                    <img\n                        alt=\"failed to load logo\"\n                        src={hwrLogo}\n                        width=\"30\"\n                        height=\"30\"\n                        className=\"d-inline-block align-top mr-4\"\n                    />\n                    HWR Berlin - Stundenplan\n                </Navbar.Brand>\n            </Nav>\n            <div className={\"trademark\"} style={{color: \"white\"}}>\n                <em>Wetterabfrage - Powered by Dark Sky</em>\n                <img\n                    src={darkSkyLogo}\n                    alt={\"Fehler\"}\n                />\n            </div>\n        </Navbar>\n    );\n};\n","import React from 'react';\nimport {MyCalendar} from \"./components/calendar/MyCalendar\";\nimport {CalendarContextProvider} from \"./components/calendar/CalendarContextProvider\";\nimport {CalendarMetadata} from \"./components/calendar/CalendarMetadata\";\nimport {HwrNavbar} from \"./components/ui/HwrNavbar\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport \"./styles/media-queries.sass\"\n\n\nconst App = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Route exact path={\"/\"}>\n                <HwrNavbar/>\n                <CalendarContextProvider>\n                    <MyCalendar/>\n                    <CalendarMetadata/>\n                </CalendarContextProvider>\n            </Route>\n            <footer id={\"footer\"}/>\n        </BrowserRouter>\n\n    );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this types and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hwr-logo-alt.244061df.svg\";","module.exports = __webpack_public_path__ + \"static/media/darkskylogo.a509dfef.png\";"],"sourceRoot":""}