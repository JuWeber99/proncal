{"version":3,"sources":["service/EventService.ts","components/calendar/CalendarContextProvider.tsx","types/CarouselEnum.ts","components/Weather/TemperatureDisplay.tsx","components/Weather/WeatherIcon.tsx","components/ui/FetchingError.tsx","components/Weather/WeatherInformation.tsx","components/calendar/MyCalendar.tsx","components/calendar/EventCard.tsx","components/calendar/CalendarMetadata.tsx","components/ui/CarouselWrapper.tsx","components/ui/HwrNavbar.tsx","App.tsx","serviceWorker.ts","index.tsx","resources/hwr-logo-alt.svg","resources/darkskylogo.png"],"names":["EventService","data","forEach","item","i","length","summary","moment","dtend","date","splice","events","map","event","allDay","title","replace","start","dtstart","toDate","end","momentProvider","locale","CarouselEnum","initalContext","isLoading","eventData","dateContext","today","month","year","error","setIsLoading","newLoadingState","setEventData","newEvents","setDateContext","newContext","setToday","newDay","setMonth","newMonth","setYear","newYear","setError","CalendarContext","React","createContext","CalendarContextProvider","children","useState","state","dispatch","value","useEffect","a","axios","request","method","url","response","mergeAssociatedEvents","fetchEventData","catch","isAxiosError","Provider","useCalendarContext","useContext","TemperatureDisplay","todayWeather","className","style","color","temperatureHigh","he","decode","temperatureLow","WeatherIcon","icon","Fragment","toUpperCase","RegExp","autoplay","FetchingError","Alert","variant","id","WeatherInformation","label","setTodayWeather","isError","setIsError","get","unix","daily","fetchData","finally","undefined","Spinner","animation","display","flexDirection","margin","MyCalendar","localizer","momentLocalizer","transformedEvents","setTransformedEvent","transformToApiEvent","defaultView","views","endAccessor","startAccessor","timeslots","step","min","Date","max","components","props","timeGutterHeader","week","header","duration","diff","asDays","toFixed","ProgressBar","animated","CalendarMetadata","semesterStart","setSemesterStart","semesterEnd","setSemesterEnd","semesterTimeLeft","setSemesterTimeLeft","from","format","CarouselContext","index","setIndex","newIndex","useCarouselContext","HwrNavbar","Navbar","bg","sticky","as","Nav","Brand","onClick","CALENDAR","alt","src","hwrLogo","width","height","Link","darkSkyLogo","App","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.13c3b89d.chunk.js","sourcesContent":["import moment from \"moment\";\r\nimport {Event} from \"react-big-calendar\";\r\nimport {MyEvent} from \"../types/Event\";\r\n\r\nexport class EventService {\r\n\r\n    static mergeAssociatedEvents<T extends MyEvent>(data: T[]): T[] {\r\n        data.forEach((item: T, i: number) => {\r\n            if (i === data.length || i === 0) {\r\n                return\r\n            }\r\n\r\n            /* for() {*/\r\n            while (\r\n                (\r\n                    (data[i].summary === data[i - 1].summary)\r\n                    && (moment(data[i].dtend).date() === moment(data[i - 1].dtend).date())\r\n                )\r\n                ) {\r\n                data[i - 1].dtend = data[i].dtend;\r\n                data.splice(i, 1);\r\n            }\r\n            /*}*/\r\n        });\r\n        return data;\r\n    };\r\n\r\n    static transformToApiEvent<T extends MyEvent>(events: T[]): Event[] {\r\n        return events.map((event: T) => {\r\n            return {\r\n                allDay: false,\r\n                title: event.summary.replace(/\\\\;/g, \" | \"),\r\n                start: moment(event.dtstart).toDate(),\r\n                end: moment(event.dtend).toDate()\r\n            }\r\n        });\r\n\r\n    }\r\n}","import moment, {Moment} from \"moment\";\r\nimport React, {Dispatch, FunctionComponent, ReactNode, SetStateAction, useContext, useEffect, useState} from \"react\";\r\nimport {MyEvent} from \"../../types/Event\";\r\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\r\nimport {EventService} from \"../../service/EventService\";\r\n\r\nexport interface CalendarContext {\r\n    isLoading: boolean\r\n    eventData: MyEvent[]\r\n    dateContext: moment.Moment\r\n    today: number\r\n    month: number\r\n    year: number\r\n    error: boolean\r\n\r\n    setIsLoading: Dispatch<SetStateAction<boolean>>\r\n    setEventData: Dispatch<SetStateAction<MyEvent[]>>\r\n    setDateContext: Dispatch<SetStateAction<Moment>>\r\n    setToday: Dispatch<SetStateAction<number>>\r\n    setYear: Dispatch<SetStateAction<number>>\r\n    setMonth: Dispatch<SetStateAction<number>>\r\n    setError: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst momentProvider = moment();\r\nmomentProvider.locale(\"de\");\r\n\r\nconst initalContext: CalendarContext = {\r\n\r\n    isLoading: false,\r\n    eventData: [],\r\n    dateContext: momentProvider,\r\n    today: momentProvider.date(),\r\n    month: momentProvider.month() + 1,\r\n    year: momentProvider.year(),\r\n    error: false,\r\n\r\n    setIsLoading: newLoadingState => {\r\n    },\r\n    setEventData: newEvents => {\r\n    },\r\n    setDateContext: newContext => {\r\n    },\r\n    setToday: newDay => {\r\n    },\r\n    setMonth: newMonth => {\r\n    },\r\n    setYear: newYear => {\r\n    },\r\n    setError: error => {\r\n    },\r\n};\r\n\r\nexport const CalendarContext = React.createContext<CalendarContext>(initalContext);\r\n\r\nexport const CalendarContextProvider: FunctionComponent<{ children: ReactNode }> = ({children}) => {\r\n\r\n    const [eventData, setEventData] = useState<MyEvent[]>([]);\r\n    const [dateContext, setDateContext] = useState<Moment>(momentProvider);\r\n    const [today, setToday] = useState<number>(momentProvider.date());\r\n    const [month, setMonth] = useState<number>(momentProvider.month() + 1);\r\n    const [year, setYear] = useState<number>(momentProvider.year());\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const state = {\r\n        isLoading,\r\n        eventData,\r\n        dateContext,\r\n        today,\r\n        month,\r\n        year,\r\n        error\r\n    };\r\n\r\n\r\n    const dispatch = {\r\n        setIsLoading,\r\n        setEventData,\r\n        setDateContext,\r\n        setToday,\r\n        setMonth,\r\n        setYear,\r\n        setError\r\n    };\r\n\r\n    const value = {...state, ...dispatch};\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchEventData() {\r\n            const response: AxiosResponse<MyEvent[]> = await axios.request<MyEvent[]>({\r\n                method: \"GET\",\r\n                url: \"https://hwr-wi-204.sagebiels.org/api/v1/events\",\r\n            });\r\n            setEventData(EventService.mergeAssociatedEvents(response.data));\r\n        }\r\n\r\n        fetchEventData()\r\n            .catch((error: AxiosError) => {\r\n                setError(error.isAxiosError)\r\n            })\r\n    }, []);\r\n\r\n    return (\r\n        <CalendarContext.Provider\r\n            value={value}>\r\n            {children}\r\n        </CalendarContext.Provider>\r\n    )\r\n};\r\n\r\nexport const useCalendarContext = (): CalendarContext => {\r\n    return useContext<CalendarContext>(CalendarContext);\r\n};","export enum CarouselEnum {\r\n    HOMEPAGE = 0,\r\n    CALENDAR = 1\r\n}","import React, {FunctionComponent} from 'react';\r\nimport {DailyWetherMeta} from \"../../types/DarkSideWether\";\r\nimport he from \"he\";\r\n\r\ninterface TemperatureInformation {\r\n    todayWeather: DailyWetherMeta[]\r\n}\r\n\r\nexport const TemperatureDisplay: FunctionComponent<TemperatureInformation> = ({todayWeather}) => {\r\n\r\n    return (\r\n        <div className={\"temperature-display\"}>\r\n            <p>\r\n                <span style={{color: \"rgba(255,91,107,0.71)\"}}>\r\n                Hoch:{(todayWeather as DailyWetherMeta[])[0].temperatureHigh}C{he.decode(\"&deg\")}\r\n                </span>\r\n                <br/>\r\n                <span style={{color: \"rgba(79,141,255,0.85)\"}}>\r\n                Tief: {(todayWeather as DailyWetherMeta[])[0].temperatureLow}C{he.decode(\"&deg\")}\r\n                </span>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n","import {DarksideIcon} from \"../../types/DarkSideWether\";\r\nimport React, {FunctionComponent} from \"react\";\r\n// @ts-ignore\r\nimport Skycons from \"react-skycons\"\r\n\r\ninterface WeatherIconProps {\r\n    icon: DarksideIcon\r\n}\r\n\r\nexport const WeatherIcon: FunctionComponent<WeatherIconProps> = ({icon}) =>  {\r\n    return (\r\n        <React.Fragment>\r\n            <Skycons\r\n                className={\"weather-icon\"}\r\n                icon={icon.toUpperCase().replace(new RegExp(\"-\", \"g\"), \"_\")}\r\n                color={\"grey\"}\r\n                autoplay\r\n            />\r\n        </React.Fragment>\r\n    )\r\n};","import React, {FunctionComponent} from 'react';\r\nimport {Alert} from \"react-bootstrap\";\r\n\r\n\r\nexport const FetchingError: FunctionComponent = () => {\r\n\r\n    return (\r\n        <Alert variant={\"danger\"} id={\"fetching-error\"}>\r\n            Fehler\r\n        </Alert>\r\n    );\r\n};\r\n","import React, {FunctionComponent, useEffect, useState} from 'react';\r\nimport {DailyWetherMeta, DarkSideWetherResponse} from \"../../types/DarkSideWether\";\r\nimport moment from \"moment\";\r\nimport axios, {AxiosError} from \"axios\"\r\nimport {Spinner} from 'react-bootstrap';\r\nimport {TemperatureDisplay} from \"./TemperatureDisplay\";\r\nimport {WeatherIcon} from \"./WeatherIcon\";\r\nimport {FetchingError} from \"../ui/FetchingError\";\r\n\r\n\r\nexport interface WeatherHeaderProps {\r\n    label: string,\r\n    date: Date\r\n}\r\n\r\nexport const WeatherInformation: FunctionComponent<WeatherHeaderProps> = ({label, date}) => {\r\n\r\n    const [todayWeather, setTodayWeather] = useState<undefined | DailyWetherMeta[]>();\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [isError, setIsError] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const response = await axios.get<DarkSideWetherResponse>(\r\n                \"https://proncal-weather-api.dns-cloud.net/\" + moment(date).unix()\r\n            );\r\n            setTodayWeather(response.data.daily.data);\r\n        }\r\n\r\n        fetchData()\r\n            .catch((error: AxiosError) => setIsError(error.isAxiosError))\r\n            .finally(() => setIsLoading(false));\r\n    }, [date]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            {isLoading && todayWeather === undefined ?\r\n                <React.Fragment>\r\n                    {label}\r\n                    <Spinner animation={\"grow\"} variant={\"dark\"}/>\r\n                </React.Fragment>\r\n                :\r\n                (\r\n                    isError ?\r\n                        <React.Fragment>\r\n                            {label}\r\n                            <FetchingError/>\r\n                        </React.Fragment>\r\n                        :\r\n                        <React.Fragment>\r\n                            <div\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    flexDirection: \"row\",\r\n                                    margin: \"5px\"\r\n                                }}>\r\n                                {label}\r\n                                <WeatherIcon icon={(todayWeather as DailyWetherMeta[])[0].icon}/>\r\n                            </div>\r\n                            <TemperatureDisplay todayWeather={todayWeather as DailyWetherMeta[]}/>\r\n                        </React.Fragment>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};","import React, {FunctionComponent, useEffect, useState} from 'react';\r\nimport {Calendar, Event, EventProps, momentLocalizer} from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"\r\nimport {useCalendarContext} from \"./CalendarContextProvider\";\r\nimport \"../../styles/customCalendar.sass\"\r\nimport \"moment/locale/de\"\r\nimport \"../../styles/app.sass\"\r\nimport {EventService} from \"../../service/EventService\";\r\nimport {EventCard} from \"./EventCard\";\r\nimport {WeatherInformation} from \"../Weather/WeatherInformation\";\r\nimport {ProgressBar} from \"react-bootstrap\";\r\nimport {FetchingError} from \"../ui/FetchingError\";\r\n\r\n\r\nexport const MyCalendar: FunctionComponent = () => {\r\n    const {eventData, dateContext} = useCalendarContext();\r\n    const {error} = useCalendarContext();\r\n    const localizer = momentLocalizer(moment);\r\n    const [transformedEvents, setTransformedEvent] = useState<Event[] | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        setTransformedEvent(EventService.transformToApiEvent(eventData))\r\n    }, [eventData]);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                error ?\r\n                <FetchingError/>\r\n                :\r\n                transformedEvents ?\r\n                <Calendar\r\n                    localizer={localizer}\r\n                    events={transformedEvents}\r\n                    defaultView={\"week\"}\r\n                    views={[\"day\", \"week\"]}\r\n                    endAccessor={\"end\"}\r\n                    startAccessor={\"start\"}\r\n                    timeslots={12}\r\n                    step={5}\r\n                    min={new Date(1, 1, 1, 8)}\r\n                    max={new Date(1, 1, 1, 22)}\r\n                    components={{\r\n                        event: ((event: EventProps) => EventCard(event)),\r\n                        timeGutterHeader: () => null,\r\n                        week: {\r\n                            header: (props: any) => {\r\n                                if (moment(props.date).week() === dateContext.week()) {\r\n                                    return (\r\n                                        <div className={\"rbc-header\"}>\r\n                                            <WeatherInformation label={props.label} date={props.date}/>\r\n                                        </div>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <div>\r\n                                            {props.label}\r\n                                            <p className={\"weather-forecast-not\"}>Voraussage\r\n                                                in: {moment.duration(moment(props.date).diff(dateContext)).asDays().toFixed(0) + \" \"}\r\n                                                Tagen\r\n                                            </p>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            }\r\n                        },\r\n                    }}/>\r\n                    :\r\n                    <ProgressBar variant={\"info\"} animated={true}/>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React, {FunctionComponent} from 'react';\r\nimport {EventProps} from \"react-big-calendar\"\r\n\r\n\r\nexport const EventCard:FunctionComponent<EventProps> = (props: EventProps) => {\r\n    return (\r\n                <div className={\"event-card\"}>\r\n                    {props.title}\r\n                </div>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useCalendarContext} from \"./CalendarContextProvider\";\r\nimport moment, {Moment} from \"moment\";\r\n\r\nexport const CalendarMetadata = () => {\r\n    const {eventData, isLoading} = useCalendarContext();\r\n    const [semesterStart, setSemesterStart] = useState<Moment>();\r\n    const [semesterEnd, setSemesterEnd] = useState<Moment>();\r\n    const [semesterTimeLeft, setSemesterTimeLeft] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        if (eventData[0] !== undefined) {\r\n            setSemesterStart(moment(eventData[0].dtstart));\r\n            setSemesterEnd(moment(eventData[eventData.length - 1].dtend));\r\n            setSemesterTimeLeft(moment(eventData[eventData.length - 1].dtend).from(moment(eventData[0].dtstart), true))\r\n        }\r\n    }, [isLoading, eventData]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                (!isLoading && semesterEnd !== undefined && semesterStart !== undefined) &&\r\n                <div className={\"calendar-metadata-container\"}>\r\n                    <h6>Semesterstart: <b>{semesterStart?.format(\"DD.MM.YYYY\")}</b> | </h6>\r\n                    <h6>Semesterende: <b>{semesterEnd?.format(\"DD.MM.YYYY\")}</b> | </h6>\r\n                    <h6>Zeit bis zum Semesterende: <b>{semesterTimeLeft}</b></h6>\r\n                </div>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, {Dispatch, FunctionComponent, ReactElement, SetStateAction, useContext, useState} from 'react';\r\nimport {Carousel} from \"react-bootstrap\";\r\n\r\ninterface CarouselWrapperProps {\r\n    content: ReactElement[]\r\n}\r\n\r\nexport interface CarouselContext {\r\n    index: number\r\n    setIndex: Dispatch<SetStateAction<number>>\r\n}\r\n\r\nconst initialCarouselContext: CarouselContext = {\r\n    index: 0,\r\n    setIndex: newIndex => {\r\n    }\r\n};\r\n\r\nexport const CarouselContext = React.createContext(initialCarouselContext);\r\n\r\nexport const useCarouselContext = () => {\r\n    return useContext<CarouselContext>(CarouselContext)\r\n};\r\n\r\nexport const CarouselContextProvider: FunctionComponent<{ children: ReactElement }> = ({children}) => {\r\n\r\n    const [index, setIndex] = useState<number>(0);\r\n    return (\r\n        <CarouselContext.Provider\r\n            value={{\r\n                index,\r\n                setIndex\r\n            }}\r\n        >\r\n            {children}\r\n        </CarouselContext.Provider>\r\n    )\r\n};\r\n\r\nconst CarouselWrapper: FunctionComponent<CarouselWrapperProps> = ({content}) => {\r\n    const {index} = useCarouselContext();\r\n\r\n    return (\r\n        <Carousel className={\"carouselA\"}\r\n                  activeIndex={index}\r\n                  onSelect={() => {}}\r\n                  interval={null}\r\n                  prevIcon={null}\r\n                  nextIcon={null}\r\n                  indicators={false}\r\n                  controls={false}\r\n                  touch={true}\r\n        >\r\n            {\r\n                content.map(\r\n                    (item: ReactElement, index: number) => {\r\n                        return (\r\n                            <Carousel.Item key={index}>\r\n                                {item}\r\n                            </Carousel.Item>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n        </Carousel>\r\n    );\r\n};\r\n\r\nexport default CarouselWrapper;","import React from 'react';\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\nimport hwrLogo from \"../../resources/hwr-logo-alt.svg\";\r\nimport {useCarouselContext} from \"./CarouselWrapper\";\r\nimport {CarouselEnum} from \"../../types/CarouselEnum\";\r\nimport darkSkyLogo from \"../../resources/darkskylogo.png\"\r\n\r\nexport const HwrNavbar = () => {\r\n    const {index, setIndex} = useCarouselContext();\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\"\r\n                sticky={\"top\"}\r\n                as={\"div\"}\r\n        >\r\n            <Nav>\r\n                <Navbar.Brand onClick={\r\n                    () => {\r\n                        if (index === CarouselEnum.CALENDAR)\r\n                            setIndex(index - 1)\r\n                    }}>\r\n                    <img\r\n                        alt=\"failed to load logo\"\r\n                        src={hwrLogo}\r\n                        width=\"30\"\r\n                        height=\"30\"\r\n                        className=\"d-inline-block align-top mr-4\"\r\n                    />\r\n                    HWR Berlin - Stundenplan\r\n                </Navbar.Brand>\r\n                {index === CarouselEnum.CALENDAR &&\r\n                <Nav.Link\r\n                    style={{color: \"lightgray\"}}\r\n                    onClick={() => setIndex(index - 1)}>Zurück</Nav.Link>}\r\n            </Nav>\r\n            <div className={\"trademark\"} style={{color: \"white\"}}>\r\n                <em>Wetterabfrage - Powered by Dark Sky</em>\r\n                <img\r\n                    src={darkSkyLogo}\r\n                    alt={\"Fehler\"}\r\n                />\r\n            </div>\r\n        </Navbar>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {MyCalendar} from \"./components/calendar/MyCalendar\";\r\nimport {CalendarContextProvider} from \"./components/calendar/CalendarContextProvider\";\r\nimport {CalendarMetadata} from \"./components/calendar/CalendarMetadata\";\r\nimport {HwrNavbar} from \"./components/ui/HwrNavbar\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport \"./styles/media-queries.sass\"\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Route exact path={\"/\"}>\r\n                <React.Fragment>\r\n                    <HwrNavbar/>\r\n                    <CalendarContextProvider>\r\n                        <MyCalendar/>\r\n                        <CalendarMetadata/>\r\n                    </CalendarContextProvider>\r\n                </React.Fragment>\r\n            </Route>\r\n            <footer id={\"footer\"}/>\r\n        </BrowserRouter>\r\n\r\n    );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this types and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/hwr-logo-alt.b4976ea6.svg\";","module.exports = __webpack_public_path__ + \"static/media/darkskylogo.a509dfef.png\";"],"sourceRoot":""}